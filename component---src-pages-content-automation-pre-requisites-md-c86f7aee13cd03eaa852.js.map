{"version":3,"sources":["webpack:///./src/pages/_content/automation/pre-requisites.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"yeAMO,IAAMA,EAAe,GAOtBC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,sBACE,kBAAIC,WAAW,QAEjB,6FACA,+BACA,iCACA,6BACA,kUAAiT,mBAAGA,WAAW,KAAQ,CACnU,KAAQ,6EADqS,QAAjT,KAGA,8BACA,sEAAqD,mBAAGA,WAAW,KAAQ,CACvE,KAAQ,+DADyC,QAArD,KAGA,sBACE,kBAAIA,WAAW,MAAf,YAAiC,0BAAYA,WAAW,MAAvB,QAAjC,2CAEF,uBAAK,sBAAMA,WAAW,OAAU,IAA3B,gLAML,sBACE,kBAAIA,WAAW,MAAf,8CAAmE,0BAAYA,WAAW,MAAvB,UAAnE,0CAEF,uBAAK,sBAAMA,WAAW,OAAU,IAA3B,+EAIL,wCAAuB,0BAAYA,WAAW,KAAvB,kCAAvB,YAA8G,0BAAYA,WAAW,KAAvB,mBAA9G,qDACA,sBACE,kBAAIA,WAAW,MAAf,eAAoC,0BAAYA,WAAW,MAAvB,UAApC,MAEF,wIACA,uBAAK,sBAAMA,WAAW,OAAU,IAA3B,8RAOL,iCACA,oDACA,qDACA,iEAAgD,0BAAYA,WAAW,KAAvB,kBAAhD,OAAkH,0BAAYA,WAAW,KAAvB,wBAAlH,uDACA,uBAAK,sBAAMA,WAAW,OAAU,IAA3B,6EAGL,mDACA,wDACA,uBAAK,sBAAMA,WAAW,OAAU,IAA3B,gEAEL,uDACA,qDACA,sCAAqB,0BAAYA,WAAW,KAAvB,+BAArB,8EACA,uBAAK,sBAAMA,WAAW,OAAU,IAA3B,sEAEL,0PACA,mDACA,2DAA0C,0BAAYA,WAAW,KAAvB,2BAA1C,oDAAkK,0BAAYA,WAAW,KAAvB,yBAAlK,6CACA,uBAAK,sBAAMA,WAAW,OAAU,IAA3B,oGAIL,+CACA,uBAAK,sBAAMA,WAAW,OAAU,IAA3B,+BAEL,8EACA,0CAAyB,0BAAYA,WAAW,KAAvB,UAAzB,2LACA,uBAAK,sBAAMA,WAAW,OAAU,IAA3B,6LAMTJ,EAAWK,gBAAiB","file":"component---src-pages-content-automation-pre-requisites-md-c86f7aee13cd03eaa852.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/Shared/VBDData/programs/cloudpak8s/node_modules/gatsby-theme-carbon/src/templates/Default.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <ul>\n      <li parentName=\"ul\"></li>\n    </ul>\n    <h1>{`make sure there is a space after the - so that the TOC is generated`}</h1>\n    <p>{`{:toc}`}</p>\n    <h2>{`Install`}</h2>\n    <h3>{`NFS`}</h3>\n    <p>{`The persistent volumes used by the different Cloud Pak for Automation components in the following chapters are relying on NFS. Before starting the install of any component, it is thus required to set-up an NFS server. An example for how to set-up and verify an NFS server for Redhat 7 can be found `}<a parentName=\"p\" {...{\n        \"href\": \"https://linuxconfig.org/quick-nfs-server-configuration-on-redhat-7-linux\"\n      }}>{`here`}</a>{`.`}</p>\n    <h3>{`Helm`}</h3>\n    <p>{`The following instructions are extracted from `}<a parentName=\"p\" {...{\n        \"href\": \"https://blog.openshift.com/getting-started-helm-openshift/\"\n      }}>{`here`}</a>{`.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Download `}<inlineCode parentName=\"li\">{`helm`}</inlineCode>{` binaries and install the client only:`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{}}>{`wget https://get.helm.sh/helm-v2.12.2-linux-386.tar.gz\ntar -zxvf helm-v2.12.2-linux-386.tar.gz\nmv linux-386/helm /usr/local/bin/\nhelm init --client-only\nhelm version\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`Create an openshift project where the Helm `}<inlineCode parentName=\"li\">{`tiller`}</inlineCode>{` (the server side) will be installed:`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{}}>{`oc new-project tiller\noc project tiller\nexport TILLER_NAMESPACE=tiller\n`}</code></pre>\n    <p>{`You can add the `}<inlineCode parentName=\"p\">{`export TILLER_NAMESPACE=tiller`}</inlineCode>{` to your `}<inlineCode parentName=\"p\">{`~/.bash_profile`}</inlineCode>{` for instance to avoid exporting in each session.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Install the `}<inlineCode parentName=\"li\">{`tiller`}</inlineCode>{`:`}</li>\n    </ul>\n    <p>{`Use the same version of the client in the following command line to have the same version of client and tiller.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`oc process -f https://github.com/openshift/origin/raw/master/examples/helm/tiller-template.yaml -p TILLER_NAMESPACE=\"\\${TILLER_NAMESPACE}\" -p HELM_VERSION=v2.12.2 | oc create -f -\noc get pods\n# Check pods are running\noc rollout status deployment tiller\nhelm init\nhelm version\n`}</code></pre>\n    <h2>{`Prepare`}</h2>\n    <h3>{`Logging-in to your cluster`}</h3>\n    <h4>{`IBM Cloud OpenShift cluster`}</h4>\n    <p>{`Start by loging in to IBM Cloud with the `}<inlineCode parentName=\"p\">{`ibmcloud login`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`ibmcloud login --sso`}</inlineCode>{` command, then select your cluster and login to it.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`ibmcloud oc cluster-config --cluster &lt;your-cluster-name>\noc login \n`}</code></pre>\n    <h4>{`On-prem OpenShift cluster`}</h4>\n    <p>{`Login directly to your cluster:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`oc login -u admin -p admin https://&lt;your-cluster-url>/\n`}</code></pre>\n    <h3>{`Accessing the Docker registry`}</h3>\n    <h4>{`IBM Cloud OpenShift cluster`}</h4>\n    <p>{`To expose the `}<inlineCode parentName=\"p\">{`docker-registry.default.svc`}</inlineCode>{`, open a command window, login to OpenShift and run the following command:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`kubectl -n default port-forward svc/docker-registry 5000:5000 &\n`}</code></pre>\n    <p>{`This is exposing port 5000 on the boot node (wherever this is run). You need to leave the command window open or else the port-forwarding will stop. Be aware of the potential timeout of port forwarding during the images push.`}</p>\n    <h4>{`On-prem OpenShift cluster`}</h4>\n    <p>{`To prepare Docker access, edit the `}<inlineCode parentName=\"p\">{`/etc/docker/daemon.json`}</inlineCode>{` Docker daemon configuration file to include the `}<inlineCode parentName=\"p\">{`\"insecure-registries\"`}</inlineCode>{` property, as shown on the example below:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`{\n  \"insecure-registries\" : [\"docker-registry-default.apps-cp4a-res.rtp.raleigh.ibm.com\"]\n}\n`}</code></pre>\n    <p>{`Restart docker daemon:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`systemctl restart docker\n`}</code></pre>\n    <h4>{`OpenShift cluster accessing IBM Cloud image registry`}</h4>\n    <p>{`You need to use a `}<inlineCode parentName=\"p\">{`secret`}</inlineCode>{` containing credentials to access IBM Cloud registry. To create this secret you need to generate a key from your IBM Cloud entitlment to access Cloud Pak for Automation docker images.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`oc create secret docker-registry cp-entitlement --docker-server=cp.icr.io --docker-username=ekey --docker-password=&lt;GENERATED_KEY_FROM_IBM_CLOUD_ENTATLMENT> --docker-email=unused\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}